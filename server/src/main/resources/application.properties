#datasource configuration
spring.datasource.url=jdbc:postgresql://ec2-54-225-89-195.compute-1.amazonaws.com:5432/davodlfjcsueja?user=kpzjjqjugvaxmh&password=84462c2419ec113db877c9ea47b30764df527ba99317ac253fc2d37983af7b4d
spring.datasource.username=kpzjjqjugvaxmh
spring.datasource.password=84462c2419ec113db877c9ea47b30764df527ba99317ac253fc2d37983af7b4d
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource
spring.datasource.driver-class-name=org.postgresql.Driver
database.url=postgres://kpzjjqjugvaxmh:84462c2419ec113db877c9ea47b30764df527ba99317ac253fc2d37983af7b4d@ec2-54-225-89-195.compute-1.amazonaws.com:5432/davodlfjcsueja
hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.main.allow-bean-definition-overriding=true
spring.jpa.generate-ddl=false
spring.main.banner-mode=off
# Removed for performance reasons
#spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#logging setup
logging.level.org.springframework=ERROR

server.port=8443

#sessions setup
spring.session.store-type=jdbc

## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB

## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
file.upload-dir=server/src/main/resources/uploads

#    This configuration is useful for applications running on custom domains
#    Heroku's default domains have SSL enabled and we don't need this code
#http controller port
#http.port=8080
#ssl setup
#server.port=8443
#server.ssl.key-store=cert/dataflow.keystore
#server.ssl.key-store-password=dataflow
#server.ssl.keyStoreType=jks
#server.ssl.keyAlias=dataflow
#server.ssl.key-password=dataflow